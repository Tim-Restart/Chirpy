// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2
)
RETURNING id, created_at, updated_at, email, hashed_password
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const getChirp = `-- name: GetChirp :one
SELECT id, created_at, updated_at, body, user_id 
FROM chirps
WHERE ID = $1
`

func (q *Queries) GetChirp(ctx context.Context, id uuid.UUID) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, getChirp, id)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const getChirps = `-- name: GetChirps :many
SELECT id, created_at, updated_at, body, user_id FROM chirps 
ORDER BY created_at ASC
`

func (q *Queries) GetChirps(ctx context.Context) ([]Chirp, error) {
	rows, err := q.db.QueryContext(ctx, getChirps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chirp
	for rows.Next() {
		var i Chirp
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEmail = `-- name: GetEmail :one
SELECT id, created_at, updated_at, email, hashed_password
FROM users
WHERE email = $1
`

func (q *Queries) GetEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
	)
	return i, err
}

const getUserEmail = `-- name: GetUserEmail :one
SELECT email
FROM users
WHERE id = $1
`

func (q *Queries) GetUserEmail(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserEmail, id)
	var email string
	err := row.Scan(&email)
	return email, err
}

const getUserFromRefreshToken = `-- name: GetUserFromRefreshToken :many
SELECT user_id, expires_at, revoked_at
FROM refresh_tokens
WHERE token = $1
`

type GetUserFromRefreshTokenRow struct {
	UserID    uuid.UUID
	ExpiresAt time.Time
	RevokedAt sql.NullTime
}

func (q *Queries) GetUserFromRefreshToken(ctx context.Context, token string) ([]GetUserFromRefreshTokenRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserFromRefreshToken, token)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserFromRefreshTokenRow
	for rows.Next() {
		var i GetUserFromRefreshTokenRow
		if err := rows.Scan(&i.UserID, &i.ExpiresAt, &i.RevokedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newChirp = `-- name: NewChirp :one
INSERT INTO chirps (id, created_at, updated_at, body, user_id)
VALUES (
    gen_random_uuid(), NOW(), NOW(), $1, $2
)
RETURNING id, created_at, updated_at, body, user_id
`

type NewChirpParams struct {
	Body   string
	UserID uuid.UUID
}

func (q *Queries) NewChirp(ctx context.Context, arg NewChirpParams) (Chirp, error) {
	row := q.db.QueryRowContext(ctx, newChirp, arg.Body, arg.UserID)
	var i Chirp
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const refreshTokenExpiry = `-- name: RefreshTokenExpiry :one
SELECT expires_at 
FROM refresh_tokens
WHERE user_id = $1
`

func (q *Queries) RefreshTokenExpiry(ctx context.Context, userID uuid.UUID) (time.Time, error) {
	row := q.db.QueryRowContext(ctx, refreshTokenExpiry, userID)
	var expires_at time.Time
	err := row.Scan(&expires_at)
	return expires_at, err
}

const revokeToken = `-- name: RevokeToken :exec
UPDATE refresh_tokens
SET updated_at = NOW(), revoked_at = NOW()
WHERE token = $1
`

func (q *Queries) RevokeToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeToken, token)
	return err
}

const saveRefToken = `-- name: SaveRefToken :exec
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at, revoked_at)
VALUES (
    $1, NOW(), NOW(), $2, NOW() + INTERVAL '60 days', NULL
)
`

type SaveRefTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) SaveRefToken(ctx context.Context, arg SaveRefTokenParams) error {
	_, err := q.db.ExecContext(ctx, saveRefToken, arg.Token, arg.UserID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET email = $2, hashed_password = $3, updated_at = NOW()
WHERE id = $1
`

type UpdateUserParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Email, arg.HashedPassword)
	return err
}

const userFromToken = `-- name: UserFromToken :one
SELECT user_id
FROM refresh_tokens
WHERE token = $1
`

func (q *Queries) UserFromToken(ctx context.Context, token string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, userFromToken, token)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}
